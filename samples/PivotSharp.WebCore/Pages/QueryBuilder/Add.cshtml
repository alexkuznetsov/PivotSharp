@page "{handler?}"
@model PivotSharp.WebCore.Pages.QueryBuilder.AddModel
@{
}

<style scoped>
    .field-list {
        min-height: 30px; /* Drop zone for sortable */
        background-color: #eee;
    }

        .field-list:not(.filters) .filter-input {
            display: none;
        }

        .field-list:not(.aggregators) .aggregator-select {
            display: none;
        }

    .glyphicon {
        color: #337ab7;
    }

    .field-list .form-control {
        margin-left: 10px;
        margin-right: 10px;
    }
</style>


<div class="row">

    <div class="col-md-4">
        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Field List</h3>
            </div>
            <div class="panel-body" style="max-height: 400px; overflow-y: scroll;">
                <div style="padding-left: 0;" id="fieldList" class="source field-list">
                    @foreach (var column in Model.PivotConfig.Columns.OrderBy(s => s.Name)) {
                        <div class="list-group-item form-inline config-item">
                            <!-- Grab Handle -->
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grip-vertical" viewBox="0 0 16 16">
                                <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0M7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
                            </svg>

                            <!-- Aggregation Type -->
                            <select class="form-select mt-10 px-3 aggregator-select form-control">
                                @foreach (var aggregator in Model.PivotConfig.Aggregators) {
                                    <option value="@aggregator">@aggregator</option>
                                }
                            </select>

                            <span class="column-name">@column.Name</span>
                            <span class="column-type"><i>@column.DataType</i></span>

                            <!-- Filter Operator -->
                            <select class="form-select mt-10 px-3 operator-select filter-input form-control">
                                @foreach (var filter in Model.PivotConfig.FilterOperators) {
                                    <option value="@filter.Op">@filter.Op</option>
                                }
                            </select>

                            <!-- Value -->
                            <input type="@column.HtmlInputType" class="parameter filter-input form-control"
                                   data-field-name="@column.Name" placeholder="@column.Name" />

                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-8">
        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Config</h3>
            </div>
            <div class="panel-body">

                <table class="table table-condensed table-bordered">
                    <thead>
                        <tr>
                            <td colspan="2">
                                <div class="list-group-item active">Filters</div>
                                <div id="filterList" class="field-list filters">
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td></td>
                            <td>
                                <div class="list-group-item active">Cols</div>
                                <div id="colList" class="field-list">
                                </div>

                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <div class="list-group-item active">Rows</div>
                                <div id="rowList" class="field-list">
                                </div>

                            </td>
                            <td>
                                <div class="list-group-item active">Aggregators</div>
                                <div id="aggregatorList" class="field-list aggregators"></div>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <a href="#" id="generate" class="btn btn-raised btn-primary pull-right generate">Generate</a>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script type="text/javascript">
        let options = {
            group: 'shared',
            animation: 150
        };
        Sortable.create(fieldList, options);
        Sortable.create(filterList, options);
        Sortable.create(colList, options);
        Sortable.create(rowList, options);
        Sortable.create(aggregatorList, options);

        document.getElementById('generate').addEventListener('click', function (e) {
            var config = {
                rows: Array.from(document.querySelectorAll('#rowList .column-name'))
                  .map((x) => x.innerHTML),
                cols: Array.from(document.querySelectorAll('#colList .column-name'))
                  .map((x) => x.innerHTML),
                filters: Array.from(document.querySelectorAll('#filterList .config-item'))
                    .map(x => ({
                        columnName: x.querySelector('.column-name').innerHTML,
                        op: x.querySelector('.operator-select').value,
                        // typeahead doesn't actually store the value in the underlying field
                        parameterValue: x.querySelector('.parameter').value
                    })),
                aggregators: Array.from(document.querySelectorAll('#aggregatorList .config-item'))
                    .map(x => ({
                        functionName: x.querySelector('.aggregator-select').value,
                        columnName: x.querySelector('.column-name').innerHTML
                    }))
            }
            // alert(JSON.stringify(config))
        });
    </script>
}
