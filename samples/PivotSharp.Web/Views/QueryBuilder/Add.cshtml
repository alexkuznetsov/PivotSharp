@model PivotSharp.Web.Models.EditPivotConfigViewModel

<style scoped>
	.field-list {
		min-height: 30px; /* Drop zone for sortable */
		background-color: #eee;
	}

		.field-list:not(.filters) .filter-input {
			display: none;
		}

		.field-list:not(.aggregators) .aggregator-select {
			display: none;
		}

	.glyphicon {
		color: #337ab7;
	}

	.field-list .form-control {
		margin-left: 10px;margin-right: 10px;
	}

	.aggregators input[type=text] {
		margin-top: -12px!important; /* Some layout bug when using typeahead */
	}

</style>


<div class="row">

	<div class="col-md-4">
		<div class="panel panel-info">
			<div class="panel-heading">
				<h3 class="panel-title">Field List</h3>
			</div>
			<div class="panel-body" style="max-height: 600px; overflow-y: scroll;">
				<div style="padding-left: 0;" id="fieldList" class="source field-list">
					@foreach (var column in Model.Columns.OrderBy(s => s.Name)) {
						<div class="list-group-item form-inline config-item">
							<!-- Grab Handle -->
							<span class="glyphicon glyphicon-move" aria-hidden="true"></span>

							<!-- Aggregation -->
							<select class="aggregator-select form-control">
								@foreach (var aggregator in Model.Aggregators) {
									<option value="@aggregator">@aggregator</option>
								}
							</select>

							<span class="column-name">@column.Name</span> <span class="column-type">(@column.DataType)</span>

							<!-- Filter Operator -->
							<select class="operator-select filter-input form-control">
								@foreach (var filter in Model.FilterOperators) {
									<option value="@filter.Op">@filter.Op</option>
								}
							</select>

							<!-- Value -->
							<input type="@column.HtmlInputType" class="parameter filter-input form-control" data-field-name="@column.Name" placeholder="@column.Name"  />

						</div>
					}
				</div>
			</div>
		</div>

	</div>

	<div class="col-md-8">
		<div class="panel panel-info">
			<div class="panel-heading">
				<h3 class="panel-title">Config</h3>
			</div>
			<div class="panel-body">

				<table class="table table-condensed table-bordered">
					<thead>
						<tr>
							<td colspan="2">
								<div class="list-group-item active">Filters</div>
								<div id="filterList" class="field-list filters">
								</div>
							</td>
						</tr>
						<tr>
							<td></td>
							<td>
								<div class="list-group-item active">Cols</div>
								<div id="colList" class="field-list">
								</div>

							</td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>
								<div class="list-group-item active">Rows</div>
								<div id="rowList" class="field-list">
								</div>

							</td>
							<td>
								<div class="list-group-item active">Aggregators</div>
								<div id="aggregatorList" class="field-list aggregators"></div>
							</td>
						</tr>
					</tbody>
				</table>

				<a href="#" class="btn btn-raised btn-primary pull-right generate">Generate</a>
			</div>
		</div>

	</div>

</div>


<script type="text/javascript">

	$(document).ready(function () {

		var sortables = {};

		$('.field-list').each(function(i, obj) {
			var id = obj.id;
			sortables[id] = Sortable.create(obj, {
				handle: '.glyphicon-move',
				group: 'fields',
				filter: '.active',
				animation: 150
			});
		});


		sortables['filterList'].options.onAdd = function(evt) {
			// May want to move the typeahead code here to limit db calls.
			var itemEl = evt.item; // dragged HTMLElement
			//$(itemEl).find('.parameter:text').each(function (i, obj) {
		};

		// Clone from the field list, so we can, eg, use a field for multiple aggregators
		sortables['fieldList'].options.group.pull = 'clone';

		// Because we're cloning, if we drag an item back to the field list, it'll duplicate.
		sortables['fieldList'].options.onAdd = function (evt) {
			var itemEl = evt.item; // dragged HTMLElement
			itemEl.remove(); // don't add
		};

		$('.field-list.source').find('.parameter:text').each(function (i, obj) {

			var fieldName = $(this).data("field-name");

			var items = new Bloodhound({
				datumTokenizer: Bloodhound.tokenizers.whitespace,
				queryTokenizer: Bloodhound.tokenizers.whitespace,
				// url points to a json file that contains an array of country names, see
				// https://github.com/twitter/typeahead.js/blob/gh-pages/data/countries.json
				prefetch: 'GetColumnValues?columnName=' + fieldName
			});

			// Take top 5 to show as defaults when nothing types.
			function withDefaults(q, sync) {
				if (q === '') {
					sync(items.all().slice(0,5));
				} else {
					items.search(q, sync);
				}
			}

			$(obj).typeahead({
				minLength: 0,
				highlight: true
			}, {
				name: fieldName,
				source: withDefaults
			});
		});


		$('.generate').on('click', function() {

				var config = {
					rows: $('#rowList .column-name').map(function() { return $(this).html(); }).get(),
					cols: $('#colList .column-name').map(function() { return $(this).html(); }).get(),
					filters: $('#filterList .config-item').map(function() {
						var $this = $(this);
						return {
							columnName: $this.find('.column-name').html(),
							op: $this.find('.operator-select').val(),
							// typeahead doesn't actually store the value in the underlying field
							parameterValue: $this.find('.parameter.tt-input').val() || $this.find('.parameter').val()
						};
					}).get(),
					aggregators: $('#aggregatorList .config-item').map(function() {
						var $this = $(this);
						return {
							functionName: $this.find('.aggregator-select').val(),
							columnName: $this.find('.column-name').html()
						};
					}).get()
				};

				console.log(config);
				// window.location = 'View/' + $.param({ 'config': JSON.stringify(config) });

//			$.ajax({
//				url: 'Generate/',
//				type: "POST",
//				data: JSON.stringify(config),
//				contentType: "application/json",
////				complete: callback
				//			});

			post(
				'Generate',
				{ config: JSON.stringify(config) });
		});

	});

	function post(path, params, method) {
		method = method || "post"; // Set method to post by default if not specified.

		// The rest of this code assumes you are not using a library.
		// It can be made less wordy if you use one.
		var form = document.createElement("form");
		form.setAttribute("method", method);
		form.setAttribute("action", path);

		for (var key in params) {
			if (params.hasOwnProperty(key)) {
				var hiddenField = document.createElement("input");
				hiddenField.setAttribute("type", "hidden");
				hiddenField.setAttribute("name", key);
				hiddenField.setAttribute("value", params[key]);

				form.appendChild(hiddenField);
			}
		}

		document.body.appendChild(form);
		form.submit();
	}
</script>